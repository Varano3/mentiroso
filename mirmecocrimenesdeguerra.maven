#include <stdio.h>
#include <math.h>
#include <windows.h> //esto es lo del multiplayer, pero por algún casual no es obligatorio
//#include <stdlib.h>

#define skibidi return 0;
#define true 1
#define false 0
typedef unsigned char bool;
typedef unsigned int Boolean;

#define NAME_LEN 32
#define PORT 12345
#define MAX_CLIENTS 10

typedef struct {
    int a,b,c,d; //b = x, c = y, d = z
    char msg[NAME_LEN];
} Buffer;

Buffer buffer = {0,0,0,0,"msg"};

typedef struct {
    int x, y, z;
    SOCKET sock;//multiplayer data
    int active;
    char name[NAME_LEN];
    char lastmsg[NAME_LEN];
} Player;


Player players[MAX_CLIENTS];

const char *caras[10] = 
{
    "Cara seria",
    "Cara levantando ceja",
    "Cara sonriente",
    "Cara triste",
    "Cara enfadada",
    "Cara sorprendida",
    "Cara asustada",
    "Cara pensativa",
    "Cara guiñando ojo",
    "Cara excitada"
};

const char *cartas[14] = 
{
    "clingai",
    "dos",
    "tres",
    "cuatro",
    "cinco",
    "seis",
    "buenos dias",
    "bum",
    "nueve",
    "zeid",
    "agresividad",
    "dios salve a la reina",
    "Ka",
    "jimbo"
};

const char *palo[5] = {
    "de kenaj",
    "de diamantes",
    "de picas de picas",
    "de tréboles",
    "el guasón"
};

int GetRandomInteger(int a, int b) {
    int min = (a < b) ? a : b;
    int max = (a > b) ? a : b;
    return (rand() % (max - min + 1)) + min;
}

int jugadoresConectados = 0;

int getLastPlayerID(int ID, int n){
    int sol = ID - 1;
    if(sol < 0){
        sol = n - 1;
    }
    return sol;
}

int getNextPlayerID(int ID, int n){
    int sol = ID + 1;
    if(sol >= n){
        sol = 0;
    }

    return sol;
}

int getDigit(int number, int position){ //posición 0-8 (de izquierda a derecha)
    float a = (number / (int)(0.2 + pow(10, position))) % 10;
    return (int)a;
}

int setDigit(int number, int position, int newDigit) {
    int divisor = (int)(0.2 + pow(10, position));
    int currentDigit = (number / divisor) % 10;
    number -= currentDigit * divisor;     // quitar el dígito actual
    number += newDigit * divisor;         // poner el nuevo dígito
    return number;
}

int ActualID = -1;

